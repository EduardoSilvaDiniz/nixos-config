(defpoll volume :interval "0s"
  "scripts/getvol")

(deflisten music :initial ""
  "playerctl --follow metadata --format '{{ artist }} - {{ title }}' || true")

(deflisten time :interval "10s"
  "date '+%H:%M %b %d, %Y'")

(defwidget bar []
  (centerbox :orientation "h"
    (workspaces)
    (music)
    (sidestuff)))
  
(defwidget sidestuff []
  (box :class "sidestuff" :orientation "h" :space-evenly false :halign "end"
    (metric :label "Û±Ñ†"
            :value volume
            :onchange "amixer sset Master {}%")
    (metric :label "Û∞çõ"
            :value {EWW_RAM.used_mem_perc}
            :onchange "")
    (metric :label "Û∞ãä"
            :value {round((1 - (EWW_DISK["/"].free / EWW_DISK["/"].total)) * 100, 0)}
            :onchange "")
    (systray :orientation "h" :icon-size: 20)
    time))


(defwidget workspaces []
  (box :class "workspaces"
       :orientation "h"
       :space-evenly true
       :halign "start"
       :spacing 10
    (button :onclick "hyprctl dispatch workspace 1" 1)
    (button :onclick "hyprctl dispatch workspace 2" 2)
    (button :onclick "hyprctl dispatch workspace 3" 3)
    (button :onclick "hyprctl dispatch workspace 4" 4)
    (button :onclick "hyprctl dispatch workspace 5" 5)))


(defwidget audio_menu []
    (box :class "parent" 
         :space-evenly "false" 
         :orientation "v"
        (box :class "header" 
             :space-evenly "false"
            (label :text "Switch Audio Devices" 
                   :class "title")
            (button :class "exit" 
                    :onclick "eww open audio_menu --toggle"
                (label :text "Û∞Öñ ")))
        (box :class "body" 
             :space-evenly "false" 
             :orientation "v"
            (button :class "button"
                    :vexpand "false"
                    :onclick "scripts/set_audio_device.sh alsa_output.pci-0000_03_00.6.analog-stereo"
                (label :text "Û∞ìÉ   Speakers"))
            (button :class "button"
                    :hexpand "false"
                    :onclick "scripts/set_audio_device.sh bluez_output.AC_12_2F_DF_8F_A8.1"
                (label :text "Û∞ãã   Headphone"))
            (button :class "button" 
                    :hexpand "false"
                    :onclick "scripts/set_audio_device.sh alsa_output.pci-0000_03_00.1.hdmi-stereo"
                (label :text "Û∞îÇ   HDMI")))))

(defwidget monitor_menu []
    (box :class "parent" 
         :space-evenly "false" 
         :orientation "v"
        (box :class "header" 
             :space-evenly "false"
            (label :text "Switch Monitors" 
                   :class "title")
            (button :class "exit" 
                    :onclick "eww open monitor_menu --toggle"
                (label :text "Û∞Öñ ")))
        (box :class "body" 
             :space-evenly "false" 
             :orientation "v"
            (button :class "button"
                    :vexpand "false"
                    :onclick "hyprctl keyword monitor eDP-1,1920x1080@60,0x0,1 && hyprctl keyword monitor HDMI-A-1,disable,1"
                (label :text "Û∞å¢   Internal"))
            (button :class "button"
                    :hexpand "false"
                    :onclick "hyprctl keyword monitor eDP-1,disable,1 && hyprctl keyword monitor HDMI-A-1,1920x1080@75,1920x0,1"
                (label :text "Û∞îÇ   External"))
            (button :class "button" 
                    :hexpand "false"
                    :onclick "hyprctl keyword monitor eDP-1,1920x1080@60,0x0,1 && hyprctl keyword monitor HDMI-A-1,1920x1080@75,1920x0,1"
                (label :text "Û∞ç∫   Multiple"))
            (button :class "button"
                    :hexpand "false"
                    :onclick "hyprctl keyword monitor eDP-1,1920x1080@60,0x0,1 && hyprctl keyword monitor HDMI-A-1,3840x2160@60,1920x0,2"
                (label :text "Û∞îÇ   Multiple 4k")))))



(defwidget metric [label value onchange]
  (box :orientation "h"
       :class "metric"
       :space-evenly false
    (box :class "label" label)
    (scale :min 0
           :max 101
           :active {onchange != ""}
           :value value
           :onchange onchange)))

(defwidget music []
  (box :class "music"
       :orientation "h"
       :space-evenly false
       :halign "center"
    {music != "" ? "üéµ${music}" : ""}))

(defwindow bar
  :monitor 0
  :windowtype "dock"
  :geometry (geometry :x "0%"
                      :y "0%"
                      :width "100%"
                      :height "0px"
                      :anchor "top center")
  :reserve (struts :side "top" :distance "0%")
  :exclusive true
  :namespace "bar"
  (bar))

(defwindow audio_menu
    :monitor 0
    :exclusive "false"
    :stacking "overlay"
    :geometry
    (geometry :anchor "center")
    (audio_menu))


(defwindow monitor_menu 
    :monitor 0
    :exclusive "false"
    :stacking "overlay"
    :geometry
    (geometry :anchor "center")
    (monitor_menu))
